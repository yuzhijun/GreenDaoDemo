package com.medical.greendao;

import java.util.List;
import com.medical.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.medical.dao.TeachersDao;
import com.medical.dao.stuAndteaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TEACHERS.
 */
public class Teachers implements java.io.Serializable {

    private Long id;
    private String teaName;
    private String teaSex;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TeachersDao myDao;

    private List<stuAndtea> manytea;

    public Teachers() {
    }

    public Teachers(Long id) {
        this.id = id;
    }

    public Teachers(Long id, String teaName, String teaSex) {
        this.id = id;
        this.teaName = teaName;
        this.teaSex = teaSex;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTeachersDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTeaName() {
        return teaName;
    }

    public void setTeaName(String teaName) {
        this.teaName = teaName;
    }

    public String getTeaSex() {
        return teaSex;
    }

    public void setTeaSex(String teaSex) {
        this.teaSex = teaSex;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<stuAndtea> getManytea() {
        if (manytea == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            stuAndteaDao targetDao = daoSession.getStuAndteaDao();
            List<stuAndtea> manyteaNew = targetDao._queryTeachers_Manytea(id);
            synchronized (this) {
                if(manytea == null) {
                    manytea = manyteaNew;
                }
            }
        }
        return manytea;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetManytea() {
        manytea = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
