package com.medical.greendao;

import com.medical.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.medical.dao.StudentsDao;
import com.medical.dao.TeachersDao;
import com.medical.dao.stuAndteaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table STU_ANDTEA.
 */
public class stuAndtea {

    private Long studentId;
    private Long teacherId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient stuAndteaDao myDao;

    private Students onestu;
    private Long onestu__resolvedKey;

    private Teachers onetea;
    private Long onetea__resolvedKey;


    public stuAndtea() {
    }

    public stuAndtea(Long studentId, Long teacherId) {
        this.studentId = studentId;
        this.teacherId = teacherId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStuAndteaDao() : null;
    }

    public Long getStudentId() {
        return studentId;
    }

    public void setStudentId(Long studentId) {
        this.studentId = studentId;
    }

    public Long getTeacherId() {
        return teacherId;
    }

    public void setTeacherId(Long teacherId) {
        this.teacherId = teacherId;
    }

    /** To-one relationship, resolved on first access. */
    public Students getOnestu() {
        Long __key = this.studentId;
        if (onestu__resolvedKey == null || !onestu__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentsDao targetDao = daoSession.getStudentsDao();
            Students onestuNew = targetDao.load(__key);
            synchronized (this) {
                onestu = onestuNew;
            	onestu__resolvedKey = __key;
            }
        }
        return onestu;
    }

    public void setOnestu(Students onestu) {
        synchronized (this) {
            this.onestu = onestu;
            studentId = onestu == null ? null : onestu.getId();
            onestu__resolvedKey = studentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Teachers getOnetea() {
        Long __key = this.teacherId;
        if (onetea__resolvedKey == null || !onetea__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeachersDao targetDao = daoSession.getTeachersDao();
            Teachers oneteaNew = targetDao.load(__key);
            synchronized (this) {
                onetea = oneteaNew;
            	onetea__resolvedKey = __key;
            }
        }
        return onetea;
    }

    public void setOnetea(Teachers onetea) {
        synchronized (this) {
            this.onetea = onetea;
            teacherId = onetea == null ? null : onetea.getId();
            onetea__resolvedKey = teacherId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
