package com.medical.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.medical.greendao.Students;
import com.medical.greendao.Teachers;

import com.medical.greendao.stuAndtea;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STU_ANDTEA.
*/
public class stuAndteaDao extends AbstractDao<stuAndtea, Void> {

    public static final String TABLENAME = "STU_ANDTEA";

    /**
     * Properties of entity stuAndtea.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StudentId = new Property(0, Long.class, "studentId", false, "STUDENT_ID");
        public final static Property TeacherId = new Property(1, Long.class, "teacherId", false, "TEACHER_ID");
    };

    private DaoSession daoSession;

    private Query<stuAndtea> students_ManystuQuery;
    private Query<stuAndtea> teachers_ManyteaQuery;

    public stuAndteaDao(DaoConfig config) {
        super(config);
    }
    
    public stuAndteaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STU_ANDTEA' (" + //
                "'STUDENT_ID' INTEGER," + // 0: studentId
                "'TEACHER_ID' INTEGER);"); // 1: teacherId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STU_ANDTEA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, stuAndtea entity) {
        stmt.clearBindings();
 
        Long studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindLong(1, studentId);
        }
 
        Long teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindLong(2, teacherId);
        }
    }

    @Override
    protected void attachEntity(stuAndtea entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public stuAndtea readEntity(Cursor cursor, int offset) {
        stuAndtea entity = new stuAndtea( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // studentId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // teacherId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, stuAndtea entity, int offset) {
        entity.setStudentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacherId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(stuAndtea entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(stuAndtea entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "manystu" to-many relationship of Students. */
    public List<stuAndtea> _queryStudents_Manystu(Long studentId) {
        synchronized (this) {
            if (students_ManystuQuery == null) {
                QueryBuilder<stuAndtea> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentId.eq(null));
                students_ManystuQuery = queryBuilder.build();
            }
        }
        Query<stuAndtea> query = students_ManystuQuery.forCurrentThread();
        query.setParameter(0, studentId);
        return query.list();
    }

    /** Internal query to resolve the "manytea" to-many relationship of Teachers. */
    public List<stuAndtea> _queryTeachers_Manytea(Long teacherId) {
        synchronized (this) {
            if (teachers_ManyteaQuery == null) {
                QueryBuilder<stuAndtea> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeacherId.eq(null));
                teachers_ManyteaQuery = queryBuilder.build();
            }
        }
        Query<stuAndtea> query = teachers_ManyteaQuery.forCurrentThread();
        query.setParameter(0, teacherId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStudentsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTeachersDao().getAllColumns());
            builder.append(" FROM STU_ANDTEA T");
            builder.append(" LEFT JOIN STUDENTS T0 ON T.'STUDENT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TEACHERS T1 ON T.'TEACHER_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected stuAndtea loadCurrentDeep(Cursor cursor, boolean lock) {
        stuAndtea entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Students onestu = loadCurrentOther(daoSession.getStudentsDao(), cursor, offset);
        entity.setOnestu(onestu);
        offset += daoSession.getStudentsDao().getAllColumns().length;

        Teachers onetea = loadCurrentOther(daoSession.getTeachersDao(), cursor, offset);
        entity.setOnetea(onetea);

        return entity;    
    }

    public stuAndtea loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<stuAndtea> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<stuAndtea> list = new ArrayList<stuAndtea>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<stuAndtea> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<stuAndtea> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
